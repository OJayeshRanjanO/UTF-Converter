#include "utfconverter.h"

int main(int argc ,char** argv){
	/* After calling parse_args(), filename and conversion should be set. */
	parse_args(argc, argv);
/*"rsrc/utf16le.txt"   "rsrc/utf16LE-special.txt"*/
	int fd = open(filename, O_RDONLY); 
	unsigned char buf[2] = {0}; 
	int rv = 0; 

	Glyph* glyph = malloc(sizeof(Glyph)); 
	
	/* Handle BOM bytes for UTF16 specially. 
         * Read our values into the first and second elements. */
	if((rv = read(fd, &buf[0], 1)) == 1 && (rv=read(fd,&buf[1],1))==1){
		if(buf[0] == 0xff && buf[1]==0xfe){
			/*file is little endian*/
			source = LITTLE; 
		} else if(buf[0] == 0xfe && buf[1]==0xff){
			/*file is big endian*/
			source = BIG;
		} else {
			/*file has no BOM*/
			free(glyph); //whole thing must be freed
			fprintf(stderr, "File has no BOM.\n");
			quit_converter(NO_FD); 
		}
	}
	glyph = fill_glyph(glyph, buf, source, &fd);
	if(conversion!=LITTLE){
		glyph = swap_endianness(glyph);
	}
	write_glyph(glyph);

	/* Now deal with the rest of the bytes.*/
	while((rv = read(fd, &buf[0], 1)) == 1 && (rv=read(fd,&buf[1],1))==1){
		glyph = fill_glyph(glyph, buf, source, &fd);
		if(conversion!=LITTLE){
			glyph = swap_endianness(glyph);
		};
		write_glyph(glyph);//FIXED HERE
	}
	free(glyph); //whole thing must be freed
	quit_converter(NO_FD);
	return 0;
}


Glyph* swap_endianness(Glyph* glyph){
	unsigned int temp = glyph->bytes[1];/* swapping values */
	glyph->bytes[1] = glyph->bytes[0];
	glyph->bytes[0] = temp; 
	if(glyph->surrogate){  /* If a surrogate pair, swap the next two bytes. */
	unsigned int temp = glyph->bytes[3];
	glyph->bytes[3] = glyph->bytes[2];
	glyph->bytes[2] = temp;
}
glyph->end = conversion;
return glyph;
}


Glyph* fill_glyph(Glyph * glyph, unsigned char data[2],endianness end,int* fd) {
	if(end == LITTLE){
		glyph->bytes[0] = data[0];
		glyph->bytes[1] = data[1];
	}
	else if(end == BIG){
		glyph->bytes[0] = data[1];
		glyph->bytes[1] = data[0];
	}
	unsigned int bits = 0; 
	unsigned int test = ((data[FIRST]<<8) + data[SECOND]); /*this is just to check for surrogate pairs*/
	bits |= test;

	/* Check high surrogate pair using its special value range.*/
	if(bits > 0xD800 && bits < 0xDBFF){ 
		if((read(*fd, data, 1) == 1) && (read(*fd, data, 1) == 1)){ /*if this condition is not met then something wrong with */
			bits = 0;
			bits |= ((data[FIRST]<<8) + data[SECOND]); /* bits |= (bytes[FIRST] + (bytes[SECOND] << 8)) */
			if(bits > 0xDC00 && bits < 0xDFFF){ /* Check low surrogate pair.*/
				glyph->surrogate = true; 
			} else {
				lseek(*fd, -OFFSET, SEEK_CUR); 
				glyph->surrogate = false;
			}
		}

	}
	if(!glyph->surrogate){
		glyph->bytes[THIRD] = glyph->bytes[FOURTH] |= 0;
	} else {
		glyph->bytes[THIRD] = data[FIRST]; 
		glyph->bytes[FOURTH] = data[SECOND];
	}
	glyph->end = conversion;
	return (Glyph * )glyph;
}


void write_glyph(Glyph* glyph){
	if(glyph->surrogate){/*surrogate size is 4 */
	write(STDOUT_FILENO, glyph->bytes, SURROGATE_SIZE);
} else {
	write(STDOUT_FILENO, glyph->bytes, NON_SURROGATE_SIZE);
}
}


void parse_args(int argc, char**argv){
	int option_index, c;
	char* endian_convert = NULL;
	

	/* If getopt() returns with a valid (its working correctly) 
	 * return code, then process the args! */
	if((c = getopt_long(argc, argv, "hu:", long_options, &option_index))!= -1){
		switch(c){ 
			case 'u':
			endian_convert = optarg;
			break;
			case 'h':
			print_help();
			break;
			default:
			fprintf(stderr, "Unrecognized argument.\n");
			quit_converter(NO_FD);
			break;
		}

	}
	filename = calloc(strlen(argv[optind]),'\0');
	if(optind < argc){
		strcpy(filename, argv[optind]);
	} else {
		fprintf(stderr, "Filename not given.\n");
		print_help();
	}

	if(endian_convert == NULL){
		fprintf(stderr, "Converson mode not given.\n");
		print_help();
	}

	if(strcmp(endian_convert, "16LE")==0){ 
		conversion = LITTLE;
	} else if(strcmp(endian_convert, "16BE")==0){
		conversion = BIG;
	} else {
		quit_converter(NO_FD);
	}
}

void print_help() {
	printf("%s",USAGE); 
	quit_converter(NO_FD);
}

void quit_converter(int fd){
	close(STDERR_FILENO);
	close(STDIN_FILENO);
	close(STDOUT_FILENO);
	if(fd != NO_FD)
		close(fd);
	exit(0);
	/* Ensure that the file is included regardless of where we start compiling from. */
}
